package com.enterprise.arch.agent.model;

/**
 * Enumeration of supported diagram types.
 * 
 * This enum defines the various types of architecture diagrams
 * that can be generated by the system using Mermaid syntax.
 * 
 * @author Enterprise Architecture Team
 * @version 1.0.0
 * @since 1.0.0
 */
public enum DiagramType {
    
    /**
     * Component diagram showing system components and their relationships
     */
    COMPONENT("component", "Component Diagram", "graph TB"),
    
    /**
     * Sequence diagram showing interactions between objects over time
     */
    SEQUENCE("sequence", "Sequence Diagram", "sequenceDiagram"),
    
    /**
     * Class diagram showing classes, attributes, methods, and relationships
     */
    CLASS("class", "Class Diagram", "classDiagram"),
    
    /**
     * Deployment diagram showing physical deployment of artifacts
     */
    DEPLOYMENT("deployment", "Deployment Diagram", "graph LR"),
    
    /**
     * Flowchart showing process flow and decision points
     */
    FLOWCHART("flowchart", "Flowchart", "flowchart TD"),
    
    /**
     * Entity-Relationship diagram showing data model relationships
     */
    ER("er", "Entity-Relationship Diagram", "erDiagram"),
    
    /**
     * System context diagram showing system boundaries and external entities
     */
    SYSTEM_CONTEXT("system-context", "System Context Diagram", "graph TB"),
    
    /**
     * State diagram showing state transitions
     */
    STATE("state", "State Diagram", "stateDiagram-v2"),
    
    /**
     * User journey diagram showing user interactions
     */
    USER_JOURNEY("user-journey", "User Journey", "journey"),
    
    /**
     * Gantt chart for project timelines
     */
    GANTT("gantt", "Gantt Chart", "gantt"),
    
    /**
     * Pie chart for data visualization
     */
    PIE("pie", "Pie Chart", "pie"),
    
    /**
     * Network diagram showing network topology
     */
    NETWORK("network", "Network Diagram", "graph LR"),
    
    /**
     * Microservices architecture diagram
     */
    MICROSERVICES("microservices", "Microservices Architecture", "graph TB"),
    
    /**
     * Data flow diagram showing information flow
     */
    DATA_FLOW("data-flow", "Data Flow Diagram", "graph LR");

    private final String id;
    private final String displayName;
    private final String mermaidPrefix;

    DiagramType(String id, String displayName, String mermaidPrefix) {
        this.id = id;
        this.displayName = displayName;
        this.mermaidPrefix = mermaidPrefix;
    }

    /**
     * Gets the unique identifier for this diagram type
     * @return the diagram type ID
     */
    public String getId() {
        return id;
    }

    /**
     * Gets the human-readable display name for this diagram type
     * @return the display name
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Gets the Mermaid syntax prefix for this diagram type
     * @return the Mermaid prefix
     */
    public String getMermaidPrefix() {
        return mermaidPrefix;
    }

    /**
     * Finds a diagram type by its ID
     * @param id the diagram type ID
     * @return the corresponding DiagramType, or null if not found
     */
    public static DiagramType fromId(String id) {
        if (id == null) {
            return null;
        }
        
        for (DiagramType type : values()) {
            if (type.getId().equalsIgnoreCase(id)) {
                return type;
            }
        }
        return null;
    }

    /**
     * Checks if this diagram type is structural (shows static structure)
     * @return true if this is a structural diagram type
     */
    public boolean isStructural() {
        return this == COMPONENT || this == CLASS || this == DEPLOYMENT || 
               this == SYSTEM_CONTEXT || this == ER || this == MICROSERVICES;
    }

    /**
     * Checks if this diagram type is behavioral (shows dynamic behavior)
     * @return true if this is a behavioral diagram type
     */
    public boolean isBehavioral() {
        return this == SEQUENCE || this == STATE || this == USER_JOURNEY || 
               this == FLOWCHART || this == DATA_FLOW;
    }

    /**
     * Checks if this diagram type is informational (shows data/metrics)
     * @return true if this is an informational diagram type
     */
    public boolean isInformational() {
        return this == PIE || this == GANTT;
    }

    /**
     * Gets the file extension for this diagram type
     * @return the recommended file extension
     */
    public String getFileExtension() {
        return ".mmd";
    }

    /**
     * Gets the MIME type for this diagram type
     * @return the MIME type
     */
    public String getMimeType() {
        return "text/vnd.mermaid";
    }

    @Override
    public String toString() {
        return displayName;
    }
}